import com.github.gradle.node.npm.task.NpmTask

plugins {
    kotlin("plugin.spring")
    id("org.springframework.boot")
    id("io.spring.dependency-management")

    id("com.microsoft.azure.azurewebapp") version "1.7.1"
    id("org.jetbrains.dokka") version "1.9.20"
    id("com.github.gmazzo.buildconfig") version "5.3.5"
    id("com.github.node-gradle.node") version "7.0.2"
}

dependencyManagement {
    imports {
        mavenBom(libs.spring.boot.bom.get().toString())
        mavenBom(libs.azure.spring.bom.get().toString())
    }
}

dependencies {
    implementation(project(":persistence"))

    implementation(libs.bundles.spring.starter.web)
    implementation(libs.spring.boot.starter.data.jpa)
    implementation(libs.spring.boot.starter.security)
    implementation(libs.bundles.jwt)
    implementation(libs.kotlin.reflect)
    implementation(libs.bundles.validation)
    implementation(libs.bundles.azure.keyvault)
    implementation(libs.openapi.starter)
    implementation(libs.bundles.json)
    implementation(libs.commons.io)
    implementation(libs.azure.blob)
    implementation(libs.bundles.kafka)

    developmentOnly(libs.spring.boot.devtools)

    annotationProcessor(libs.spring.boot.config.processor)

    testImplementation(libs.bundles.testing.integration)
    testImplementation(libs.bundles.testing.web)
    testImplementation(libs.spring.kafka.test)

    testRuntimeOnly(libs.junit.platform.launcher)
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll("-Xjsr305=strict")
    }
}

testing {
    suites {
        val test by getting(JvmTestSuite::class) {
            useJUnitJupiter()
            dependencies {
                implementation(project(":persistence"))
                implementation(libs.spring.boot.starter.data.jpa.get().toString())
            }
        }
        register<JvmTestSuite>("integrationTest") {
            testType = TestSuiteType.INTEGRATION_TEST
            dependencies {
                implementation(project())
                implementation(project(":persistence"))

                implementation(libs.spring.boot.starter.test.get().toString())
                implementation(libs.awaitility.get().toString())

                implementation(libs.httpclient.get().toString())
                implementation(libs.rest.assured.get().toString())

                implementation(libs.spring.kafka.test.get().toString())
                implementation(libs.spring.kafka.production.get().toString())
                implementation(libs.kafka.clients.get().toString())

                implementation(libs.greenmail.get().toString())

                implementation(libs.spring.boot.starter.jdbc.get().toString())
                implementation(libs.spring.boot.starter.security.get().toString())

                implementation(libs.kotlin.logging.get().toString())
            }
        }
        register<JvmTestSuite>("apiTest") {
            testType = TestSuiteType.FUNCTIONAL_TEST
            dependencies {
                implementation(project())
                implementation(project(":persistence"))

                implementation(libs.spring.boot.starter.test.get().toString())
                implementation(libs.junit4.get().toString())

                implementation(libs.httpclient.get().toString())
                implementation(libs.rest.assured.get().toString())

                implementation(libs.spring.kafka.test.get().toString())
                implementation(libs.spring.kafka.production.get().toString())
                implementation(libs.kafka.clients.get().toString())

                implementation(libs.spring.boot.starter.data.jpa.get().toString())
                implementation(libs.spring.boot.starter.web.get().toString())
            }
        }
    }
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events("PASSED", "SKIPPED", "FAILED")
    }
}

tasks.named<Test>("apiTest") {
    testLogging {
        showStandardStreams = true
        events("PASSED", "SKIPPED", "FAILED")
    }
}

tasks.named<Test>("integrationTest") {
    testLogging {
        showStandardStreams = true
        events("PASSED", "SKIPPED", "FAILED")
    }
}

val deployVersion = if (project.hasProperty("deployVersion")) {
    project.property("deployVersion") as String
} else {
    "Aardvark-v0.1"
}

buildConfig {
    packageName("org.hkurh.doky")
    documentation.set("Generated by BuildConfig plugin")
    buildConfigField("DEPLOY_VERSION", provider { deployVersion })
}

node {
    download = true
    version = "20.12.2"
    npmInstallCommand = "ci"
    nodeProjectDir = file("${project.projectDir}/doky-front")
}

tasks.register<NpmTask>("npmBuild") {
    description = "Runs npm build and creates dist folder"
    group = "npm"
    dependsOn("npmInstall")
    args = listOf("run", "build")
}

tasks.register<Copy>("copyFrontDistSrc") {
    description = "Copy build front files to static folder under resources"
    group = "npm"
    dependsOn("npmBuild")
    from("$projectDir/doky-front/dist")
    into("$projectDir/src/main/resources/static")
}

tasks.named("processResources") {
    dependsOn("copyFrontDistSrc")
}

tasks.named("clean") {
    doLast {
        delete("server/src/main/resources/static")
    }
}
