import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.MetricType
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java'
    id 'jvm-test-suite'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'com.microsoft.azure.azurewebapp' version '1.7.1'
    id "org.jetbrains.kotlinx.kover" version "0.7.6"
}

group = 'org.hkurh.doky'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.flywaydb:flyway-core:9.21.0'
    implementation 'org.flywaydb:flyway-mysql:9.21.0'
    implementation 'com.mysql:mysql-connector-j:8.3.0'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    implementation 'joda-time:joda-time:2.10.13'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.13.1'
    implementation 'commons-io:commons-io:2.11.0'

    implementation 'com.azure:azure-storage-blob:12.25.3'
    implementation 'org.apache.solr:solr-solrj:9.5.0'

    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.13'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.0.0"
    testImplementation 'com.icegreen:greenmail:2.0.1'


    testImplementation('io.rest-assured:rest-assured:5.3.0') {
        exclude group: 'org.codehaus.groovy'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()

                implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
                implementation 'org.springframework.boot:spring-boot-starter-web'
                implementation 'org.springframework.boot:spring-boot-starter-test'

                implementation 'com.icegreen:greenmail:2.0.1'
                implementation 'org.apache.solr:solr-solrj:9.5.0'
            }
        }
        apiTest(JvmTestSuite) {
            dependencies {
                implementation project()

                implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
                implementation 'org.springframework.boot:spring-boot-starter-web'
                implementation 'org.springframework.boot:spring-boot-starter-test'

                implementation 'org.springframework:spring-mock:2.0.8'
                implementation 'org.apache.httpcomponents:httpclient:4.5.13'
                implementation 'org.junit.jupiter:junit-jupiter:5.8.2'
                implementation 'org.mockito:mockito-junit-jupiter:4.0.0'
                implementation 'org.mockito.kotlin:mockito-kotlin:5.0.0'
                implementation 'io.rest-assured:rest-assured:5.3.0'
            }
        }
    }
}

apiTest.onlyIf { project.hasProperty('runApiTests') && project.property('runApiTests') }
integrationTest.onlyIf { project.hasProperty('runIntegrationTests') && project.property('runIntegrationTests') }

kover {
    excludeSourceSets {
        names("integrationTest")
        names("apiTest")
    }
}

koverReport {
    defaults {
        filters {
            includes {
                classes("org.hkurh.*")
            }
        }
        verify {
            rule {
                bound {
                    minValue = 33
                    metric = MetricType.LINE
                    aggregation = AggregationType.COVERED_PERCENTAGE
                }
            }
        }
    }
}

if (project.hasProperty('deployVersion')) {
    project.version = project.deployVersion
} else {
    project.version = 'Aardvark-v0.1'
}

azurewebapp {
    subscription = System.env.AZURE_SUBSCRIPTION
    resourceGroup = System.env.AZURE_RESOURCE_GROUP
    appName = System.env.AZURE_APP_NAME
    appSettings {
        SPRING_PROFILES_ACTIVE = System.env.SPRING_PROFILES_ACTIVE
        SPRING_DATASOURCE_URL = System.env.SPRING_DATASOURCE_URL
        SPRING_DATASOURCE_USERNAME = System.env.SPRING_DATASOURCE_USERNAME
        SPRING_DATASOURCE_PASSWORD = System.env.SPRING_DATASOURCE_PASSWORD
        AZURE_BLOB_CONNECTION = System.env.AZURE_BLOB_CONNECTION
        AZURE_BLOB_CONTAINER = System.env.AZURE_BLOB_CONTAINER
        BUILD_NUMBER = project.version
        BUILD_COMMIT = System.env.BUILD_COMMIT
    }
    auth {
        type = "service_principal"
        environment = "AZURE"
        client = System.env.AZURE_CLIENT
        tenant = System.env.AZURE_TENANT
        key = System.env.AZURE_AUTH_KEY
    }
}
